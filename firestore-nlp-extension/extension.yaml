# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: firestore-natural-language-processing
version: 0.0.1
specVersion: v1beta

displayName: Firestore Natural Language Processing

description: >-
  Perform Natural Language Processing (NLP) tasks on strings written to Firestore.

license: Apache-2.0

sourceUrl: https://github.com/FirebaseExtended/firestore-nlp-extension 

author:
  authorName: Firebase
  url: https://firebase.google.com

contributors:
  - authorName: Walid Bounouar
    url: https://github.com/WalidBounouar

billingRequired: true

apis:
  - apiName: language.googleapis.com
    reason: Powers all NLP tasks performed by the extension.

roles:
  - role: datastore.user
    reason: Allows the extension to read input data from Cloud Firestore and write the NLP data to Cloud Firestore.

resources:
  - name: firestoreNlpDocCreate
    type: firebaseextensions.v1beta.function
    description:
      Listens for new documents in your specified Cloud Firestore collection, performs the configured NLP tasks on a specific string,
      then writes the output from the NLP tasks back to the same document.
      The NLP tasks available are entity extraction, sentiment analysis and content classification.
    properties:
      location: ${LOCATION}
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.create
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${COLLECTION_PATH}/{messageId}
      runtime: "nodejs10"
  - name: firestoreNlpDocUpdate
    type: firebaseextensions.v1beta.function
    description:
      Listens for updates to strings in your specified Cloud Firestore collection, performs the configured NLP tasks on the string,
      then writes the output from the NLP tasks back to the same document (overriding any previous data).
      The NLP tasks available are entity extraction, sentiment analysis and content classification.
    properties:
      location: ${LOCATION}
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.update
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${COLLECTION_PATH}/{messageId}
      runtime: "nodejs10"

params:
  - param: LOCATION
    label: Cloud Functions location
    description: >-
      Where do you want to deploy the functions created for this extension?
      For help selecting a location, refer to the [location selection
      guide](https://firebase.google.com/docs/functions/locations).
    type: select
    options:
      - label: Iowa (us-central1)
        value: us-central1
      - label: South Carolina (us-east1)
        value: us-east1
      - label: Northern Virginia (us-east4)
        value: us-east4
      - label: Belgium (europe-west1)
        value: europe-west1
      - label: London (europe-west2)
        value: europe-west2
      - label: Frankfurt (europe-west3)
        value: europe-west3
      - label: Hong Kong (asia-east2)
        value: asia-east2
      - label: Tokyo (asia-northeast1)
        value: asia-northeast1
    default: us-central1
    required: true
    immutable: true

  - param: COLLECTION_PATH
    label: Collection path
    description: >
      What is the path of the collection that you would like to process? You may
      use `{wildcard}` notation to match a subcollection of all documents in a
      collection (for example: `travelLocations/{location_id}/reviews`).
    example: reviews
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Must be a valid Cloud Firestore Collection
    default: reviews
    required: true

  - param: INPUT_FIELD_NAME
    label: Input field name
    description: >
      What is the name of the field that contains the string that you want NLP to be performed on?
    example: text
    default: text
    required: true
  
  - param: OUTPUT_FIELD_NAME
    label: Output field name
    description: >
      What is the name of the field that will contain the output(s) from NLP tasks?
    example: textNLP
    default: textNLP
    required: true

  - param: TASKS
    label: NLP task to perform on the input data.
    description: >
      Select one or more NLP tasks to perform on the input data.
    type: multiselect
    options:
      - label: Entity extraction
        value: ENTITY
      - label: Sentiment analysis
        value: SENTIMENT
      - label: Content classification
        value: CLASSIFICATION
    default: ENTITY
    required: true

  - param: ENTITY_TYPES
    label: Entities to filter.
    description: >
      If you perform entity extraction, which entity types are you interested in? (ignored if entity extraction is not performed)
    type: multiselect
    options:
      - label: Location
        value: LOCATION
      - label: Person
        value: PERSON
      - label: Organization
        value: ORGANIZATION
      - label: Event
        value: EVENT
      - label: Artwork
        value: WORK_OF_ART
      - label: Consumer product
        value: CONSUMER_GOOD
      - label: Other types of entities
        value: OTHER
      - label: Phone number
        value: PHONE_NUMBER
      - label: Address
        value: ADDRESS
      - label: Date
        value: DATE
      - label: Number
        value: NUMBER
      - label: Price
        value: PRICE
      - label: Unknown
        value: UNKNOWN
    default: LOCATION
    required: true

  - param: SAVE_COMMON_ENTITIES
    label: Do you want entities that are common nouns to be saved?
    description: >
      If you perform entity extraction, entities can either be "common" or "proper". Common entities can be numerous 
      so you can select "No" so that they are not saved.
    type: select
    options:
      - label: Yes
        value: true
      - label: No
        value: false
    default: false
    required: true
